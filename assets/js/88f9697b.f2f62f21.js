"use strict";(self.webpackChunktiny=self.webpackChunktiny||[]).push([[264],{6396:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"init","title":"Init","description":"- If you\'re doing this tutorial at the btc++ conference in Berlin on Friday, October 6, 2023, I\'ve already set up a VPS for you to use in this workshop.","source":"@site/docs/init.md","sourceDirName":".","slug":"/init","permalink":"/nixos-mutinynet-tutorial/init","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Init","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Intro","permalink":"/nixos-mutinynet-tutorial/"},"next":{"title":"Bitcoind","permalink":"/nixos-mutinynet-tutorial/bitcoind"}}');var s=i(4848),o=i(8453);const r={title:"Init",sidebar_position:2},a="Set up your NixOS VPS",c={},l=[];function d(e){const n={a:"a",code:"code",h1:"h1",header:"header",input:"input",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"set-up-your-nixos-vps",children:"Set up your NixOS VPS"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If you're doing this tutorial at the btc++ conference in Berlin on Friday, October 6, 2023, I've already set up a VPS for you to use in this workshop."}),"\n",(0,s.jsx)(n.li,{children:"If you're doing this tutorial sometime later, you can use any NixOS machine. The config will be a bit different since the tutorial uses a config tailored to DigitalOcean. Reach out to me and I'll be happy to help you set it up :)"}),"\n",(0,s.jsxs)(n.li,{children:["If you just want to do the same thing I did with ",(0,s.jsx)(n.code,{children:"terraform"})," and ",(0,s.jsx)(n.code,{children:"morph"}),", follow ",(0,s.jsx)(n.a,{href:"https://justinas.org/nixos-in-the-cloud-step-by-step-part-1",children:"this excellent tutorial"}),". The files I used for Terraform and Morph are included in ",(0,s.jsx)(n.a,{href:"https://github.com/chrisguida/Deploying-Your-First-NixOS-Machine",children:"the github repo for the current tutorial"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"exercise-generate-and-switch-to-a-new-config",children:"Exercise: Generate and switch to a new config"}),"\n",(0,s.jsx)(n.p,{children:"Get your ip address and log into it:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["user: ",(0,s.jsx)(n.code,{children:"bitcoiner"})]}),"\n",(0,s.jsxs)(n.li,{children:["password: ",(0,s.jsx)(n.code,{children:"btcpp"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"ssh bitcoiner@<your ip>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The following command will generate a new ",(0,s.jsx)(n.code,{children:"configuration.nix"})," and ",(0,s.jsx)(n.code,{children:"hardware-configuration.nix"})," for your system."]}),"\n",(0,s.jsxs)(n.p,{children:["This command will spit out a warning: ",(0,s.jsx)(n.code,{children:"warning: not overwriting existing /etc/nixos/configuration.nix"}),". You can safely ignore this warning."]}),"\n",(0,s.jsxs)(n.p,{children:["We don't need the ",(0,s.jsx)(n.code,{children:"configuration.nix"})," as we're replacing it in the next step. We just need ",(0,s.jsx)(n.code,{children:"hardware-configuration.nix"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"sudo nixos-generate-config\n"})}),"\n",(0,s.jsx)(n.p,{children:"Delete the automatically generated config and make a new one:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"sudo rm /etc/nixos/configuration.nix\nsudo vim /etc/nixos/configuration.nix\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then type ",(0,s.jsx)(n.code,{children:"i"})," (for insert) and copy and paste this into the file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-nix",children:'{ modulesPath, lib, pkgs, ... }:\n{\n  imports = lib.optional (builtins.pathExists ./do-userdata.nix) ./do-userdata.nix ++ [\n\n  # import the autogenerated `hardware-configuration.nix`\n  ./hardware-configuration.nix\n\n  # import the digitalocean-specific settings\n\t(modulesPath + "/virtualisation/digital-ocean-config.nix")\n  ];\n\n  # Resolve a conflict between the DO-specific config and `hardware-configuration.nix`\n  fileSystems."/".device = lib.mkForce "/dev/disk/by-label/nixos";\n\n  # set the stateVersion\n  system.stateVersion = "23.11";\n\n  # enable flakes and nix commands\n  nix.extraOptions = "experimental-features = nix-command flakes";\n\n  # declare user `bitcoiner`\n  users.users.bitcoiner = {\n\t  isNormalUser = true;\n\t  description = "bitcoiner";\n\n    # feel free to change this or use an ssh key\n    # delete this if you only want SSH key access\n\t  password = "btcpp";\n\n    # here\'s how to set an SSH key:\n    # openssh.authorizedKeys.keys = [ \n    #   "<SSH key goes here>"\n    # ];\n\n    # Allow the `bitcoiner` user to use `sudo`\n    extraGroups = [ "wheel" ];\n\n    # install vim. I like it better than `nano`, but you can use either\n    packages = with pkgs; [\n      vim\n\n      # you\'ll want `jq` to parse your CLN node\'s command output\n      jq\n    ];\n  };\n\n  # Configure OpenSSH\n  services.openssh = {\n\n    # Allow password authentication\n    settings.PasswordAuthentication = true;\n\n    # Lengthen the default SSH session timeout\n    # (The DO default is annoyingly short)\n    extraConfig = \'\'\n      ClientAliveInterval 120\n      ClientAliveCountMax 720\n    \'\';\n  };\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Then hit ESCAPE (to exit insert mode) and type ",(0,s.jsx)(n.code,{children:"ZZ"})," to save and exit vim"]}),"\n",(0,s.jsx)(n.p,{children:"Now let's switch to the new config (same as the old config, but now you're editing it locally instead of me editing it remotely)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"sudo nixos-rebuild switch\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now log out and log back in. Your password should still work, and this command should still work:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"sudo vim /etc/nixos/configuration.nix\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Type ",(0,s.jsx)(n.code,{children:":q!"})," then press ENTER to quit ",(0,s.jsx)(n.code,{children:"vim"})," without saving."]}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Generate config"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Edit it"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Switch to the new config"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Test config by running ",(0,s.jsx)(n.code,{children:"sudo vim /etc/nixos/configuration.nix"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Now on to the more exciting part!"})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);