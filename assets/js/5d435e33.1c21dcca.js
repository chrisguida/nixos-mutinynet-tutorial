"use strict";(self.webpackChunktiny=self.webpackChunktiny||[]).push([[203],{6050:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"bitcoind","title":"Bitcoind","description":"- In this section we install and sync bitcoind on our NixOS box!","source":"@site/docs/bitcoind.md","sourceDirName":".","slug":"/bitcoind","permalink":"/nixos-mutinynet-tutorial/bitcoind","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Bitcoind","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Init","permalink":"/nixos-mutinynet-tutorial/init"},"next":{"title":"Cln","permalink":"/nixos-mutinynet-tutorial/cln"}}');var s=i(4848),o=i(8453);const c={title:"Bitcoind",sidebar_position:3},r="Bitcoind",l={},a=[];function d(n){const e={a:"a",code:"code",h1:"h1",header:"header",input:"input",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"bitcoind",children:"Bitcoind"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["In this section we install and sync ",(0,s.jsx)(e.code,{children:"bitcoind"})," on our NixOS box!"]}),"\n",(0,s.jsxs)(e.li,{children:["This will build the ",(0,s.jsx)(e.a,{href:"https://github.com/benthecarman/bitcoin/tree/configure-signet-blockitme",children:"mutinynet fork of bitcoind"})," from source, and install via a ",(0,s.jsx)(e.a,{href:"https://github.com/fort-nix/nix-bitcoin/commit/e177c2eb4895c152df7baabb892a9a401daa582c",children:"modified version"})," of the ",(0,s.jsx)(e.code,{children:"nix-bitcoin"})," ",(0,s.jsx)(e.code,{children:"bitcoind"})," NixOS module, using a Nix flake."]}),"\n",(0,s.jsxs)(e.li,{children:["It will also configure ",(0,s.jsx)(e.code,{children:"bitcoind"})," as a system service and start the initial block download. Syncing Mutinynet should be fairly quick; it should be done in just a few minutes."]}),"\n",(0,s.jsxs)(e.li,{children:["Shoutout to ",(0,s.jsx)(e.a,{href:"https://github.com/benthecarman/",children:"@benthecarman"})," and the Mutiny Wallet team for maintaining this fork of bitcoin and making life super easy for developers!"]}),"\n",(0,s.jsxs)(e.li,{children:["Shoutout to ",(0,s.jsx)(e.a,{href:"https://github.com/erikarvstedt/",children:"@erikarvstedt"})," for modifying ",(0,s.jsx)(e.code,{children:"nix-bitcoin"})," so we could run Mutinynet!"]}),"\n"]}),"\n",(0,s.jsxs)(e.h1,{id:"exercise-add-mutinynet-bitcoind-nix-bitcoin-module-to-your-system-config",children:["Exercise: Add mutinynet bitcoind ",(0,s.jsx)(e.code,{children:"nix-bitcoin"})," module to your system config"]}),"\n",(0,s.jsxs)(e.p,{children:["First, create a new file, ",(0,s.jsx)(e.code,{children:"/etc/nixos/flake.nix"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sh",children:"sudo vim /etc/nixos/flake.nix\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Activate insert mode (",(0,s.jsx)(e.code,{children:"i"}),") and copy this in:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-nix",children:'{\n  description = "btcpp-berlin-mutinynet machine configuration";\n\n  # pull in the modified `nix-bitcoin` flake into our flake\n  inputs.nix-bitcoin.url = "github:chrisguida/nix-bitcoin/mempool-and-fix-no-feerate";\n  \n  # for a mainnet node, you would just do:\n  # inputs.nix-bitcoin.url = "github:fort-nix/nix-bitcoin";\n\n  # However, the main branch of nix-bitcoin does not have bitcoind-mutinynet, nor mempool,\n  # so it will not work with this tutorial.\n  # Stay tuned, though. Mempool is close :) https://github.com/fort-nix/nix-bitcoin/pull/505\n  \n  outputs = { self, nix-bitcoin  }: {\n    nixosConfigurations = {\n\n      # Our machine config\n      btcpp-berlin-mutinynet = nix-bitcoin.inputs.nixpkgs.lib.nixosSystem {\n        modules = [\n\n          # import the default NixOS modules from nix-bitcoin\n          nix-bitcoin.nixosModules.default\n\n          # import configuration.nix into our flake\n          ./configuration.nix\n        ];\n      };\n    };\n  };\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Exit out of insert (ESCAPE) and hit ",(0,s.jsx)(e.code,{children:"ZZ"})," again to save and exit."]}),"\n",(0,s.jsxs)(e.p,{children:["Now let's edit ",(0,s.jsx)(e.code,{children:"configuration.nix"})," again:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sh",children:"sudo vim /etc/nixos/configuration.nix\n"})}),"\n",(0,s.jsx)(e.p,{children:"(I recommend pasting this after the services.openssh section):"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-nix",children:"  services.bitcoind = {\n\n    # enable the bitcoind service from our flake\n    enable = true;\n\n    # enable the transaction index (optional) (needed for \n    # block explorers and some address indexers)\n    txindex = true;\n\n    # listen for peer connections\n    address = \"0.0.0.0\";\n    listen = true;\n\n    # set fallback fee (required for mutinynet because fee estimate is always 0)\n    # enable block filters (optional)\n    extraConfig = ''\n      fallbackfee=0.00000253\n      blockfilterindex=1\n      peerblockfilters=1\n    '';\n  };\n"})}),"\n",(0,s.jsx)(e.p,{children:"Make sure to have nix-bitcoin generate your secrets, and set an operator (this can go immediately after the above):"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-nix",children:'  nix-bitcoin.generateSecrets = true;\n  nix-bitcoin.operator.name = "bitcoiner";\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Also make sure to add your user to the ",(0,s.jsx)(e.code,{children:"bitcoin"})," group:"]}),"\n",(0,s.jsxs)(e.p,{children:["Change the ",(0,s.jsx)(e.code,{children:"users.users.bitcoiner.extraGroups"})," line from"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-nix",children:'extraGroups = [ "wheel" ];\n'})}),"\n",(0,s.jsx)(e.p,{children:"to"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-nix",children:'extraGroups = [ "wheel" "bitcoin" ];\n'})}),"\n",(0,s.jsx)(e.p,{children:"Finally, open port 8333 in your firewall so your node is contributing to the network:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-nix",children:"networking.firewall.allowedTCPPorts = [ 8333 ];\n"})}),"\n",(0,s.jsx)(e.p,{children:"then switch your system to use your new flake:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"sudo nixos-rebuild switch --flake /etc/nixos/#btcpp-berlin-mutinynet\n"})}),"\n",(0,s.jsx)(e.p,{children:"log out of SSH and log back in to pick up the changes to your user."}),"\n",(0,s.jsx)(e.p,{children:"make sure the bitcoin node is running and track IBD progress (mutinynet's entire blockchain is under 500MB at the time of writing and IBD should take just a few minutes):"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sh",children:"bitcoin-cli -getinfo\n"})}),"\n",(0,s.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Create flake"]}),"\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Add bitcoind to system config"]}),"\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Add ",(0,s.jsx)(e.code,{children:"nix-bitcoin"})," ",(0,s.jsx)(e.code,{children:"operator"})," and ",(0,s.jsx)(e.code,{children:"generate-secrets"})," to config"]}),"\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Switch to the new config"]}),"\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Log out and log back in to update your user's groups"]}),"\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Test new bitcoind by running ",(0,s.jsx)(e.code,{children:"bitcoin-cli -getinfo"})]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>c,x:()=>r});var t=i(6540);const s={},o=t.createContext(s);function c(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:c(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);